using System;
using System.Collections.Generic;
using System.Linq;
using mob_ai_csharp.multipaint;

namespace mob_ai_csharp
{
    public class Bot : IBot
    {
        public List<string> ActionTypes = new List<string>() { "shoot", "walk" };

        public List<List<int>> ActionDirections = new List<List<int>>()
        {
            new List<int>{-1, -1}, //0 Up Left
            new List<int>{ 0, -1}, //1 Left
            new List<int>{ 1, -1}, //2 Down Left
            new List<int>{-1,  0}, //3 Up
            new List<int>{ 1,  0}, //4 Down
            new List<int>{-1,  1}, //5 Up Right
            new List<int>{ 0,  1}, //6 Right
            new List<int>{ 1,  1}, //7 Down Right
        };

        private string PlayerId;
        public Random R;

        private static void Main(string[] args)
        {
            Runner.Run(new Bot());
        }

        public void SetPlayerId(string playerId)
        {
            this.PlayerId = playerId;
            this.R = new Random();
        }

        public Move NextMove(Board boardState)
        {
            Move move = new Move();

            var bestShoot = BestShootOption(boardState);
            var bestWalkDir = BestWalkOption(boardState);

            if ((bestShoot == null || !bestShoot.Any())
                && (bestWalkDir == null || !bestWalkDir.Any()))
            {
                move.Type = this.ActionTypes[1];
                move.Direction = this.ActionDirections[this.R.Next(8)];
                return move;
            }
            if (bestShoot == null || !bestShoot.Any())
            {
                move.Type = this.ActionTypes[1];
                move.Direction = this.ActionDirections[bestWalkDir[0]];
                return move;
            }
            if (bestWalkDir == null || !bestWalkDir.Any())
            {
                move.Type = this.ActionTypes[0];
                move.Direction = this.ActionDirections[bestShoot[0]];
                return move;
            }

            if(bestShoot[1] > bestWalkDir[1])
            {
                move.Type = this.ActionTypes[0];
                move.Direction = this.ActionDirections[bestShoot[0]];
            }else
            {
                move.Type = this.ActionTypes[1];
                move.Direction = this.ActionDirections[bestWalkDir[0]];
                
            }
            return move;
        }
        
        /// <summary>
        /// Returns the best shoot option.
        /// Its not working for sideways
        /// </summary>
        /// <param name="boardState">State of the board.</param>
        /// <returns>List&lt;System.Int32&gt;.</returns>
        private List<int> BestShootOption(Board boardState)
        {
            //shoot
            //Am I surrounded by all me?
            var mePos = boardState.player_positions[this.PlayerId];//Y,X
            List<List<int>> possiblePlays = new List<List<int>>();//Y,X,weight

            //them corners
            if ((mePos[0] == boardState.height-1 && mePos[1] == 0)
                || ( mePos[0] == 0 && mePos[1] == 0)
                || (mePos[0] == 0 && mePos[1] == boardState.width-1)
                || (mePos[0] == boardState.height-1 && mePos[1] == boardState.width-1)
                )
            {
                return null;
            }

            //shoot left
            if (mePos[1] != boardState.width-1
                && boardState.colors[mePos[0]][mePos[1]+1] == PlayerId)
            {
                //get positions painted to the right
                int paintedPosNr = 0;
                bool stop = false;
                Enumerable.Range(mePos[1]+1, boardState.width - mePos[1]).ToList()
                    .ForEach(posX => { if (stop) return;
                                        if (boardState.colors[mePos[0]][posX] == PlayerId) { paintedPosNr++; } else stop = true; });

                int weight = 0;
                var lastnotPaintedPos = new List<int>();
                Enumerable.Range(0, mePos[1]).ToList()
                                        .ForEach(posX => 
                                        {
                                            if (IsPosOccupied(boardState, mePos[0], posX))
                                            { weight = 0; lastnotPaintedPos = new List<int>(); }
                                            else
                                                { if (boardState.colors[mePos[0]][posX] != PlayerId)
                                                    { lastnotPaintedPos.Add(posX); weight += boardState.colors[mePos[0]][posX] == null ? 1 : 2; }
                                                }
                                        });
                if (paintedPosNr != 0 && lastnotPaintedPos.Any())
                {
                    if (mePos[1] - lastnotPaintedPos.First() <= paintedPosNr)
                    {
                        possiblePlays.Add(CreateWeightActionDirection(1, weight)); //left
                    }
                }
            }
            if (mePos[1] > 0
                && boardState.colors[mePos[0]][mePos[1] - 1] == PlayerId)
            { //shoot right
                int paintedPosNr = 0;
                bool stop = false;
                Enumerable.Range(0, mePos[1]).Reverse().ToList()
                    .ForEach(posX => {
                        if (stop) return;
                        if (boardState.colors[mePos[0]][posX] == PlayerId) { paintedPosNr++; } else stop = true; });

                int weight = 0;
                var lastnotPaintedPos = new List<int>();
                Enumerable.Range(mePos[1], boardState.width - mePos[1]).Reverse().ToList()
                                                .ForEach(posX =>
                                                    {
                                                        if (IsPosOccupied(boardState, mePos[0], posX))
                                                        { weight = 0; lastnotPaintedPos = new List<int>(); }
                                                        else
                                                        {
                                                            if (boardState.colors[mePos[0]][posX] != PlayerId)
                                                            { lastnotPaintedPos.Add(posX); weight += boardState.colors[mePos[0]][posX] == null ? 1 : 2; }
                                                        }
                                                    });
                if (paintedPosNr != 0 && lastnotPaintedPos.Any())
                {
                    if (lastnotPaintedPos.First() - mePos[1] <= paintedPosNr)
                    {
                        possiblePlays.Add(CreateWeightActionDirection(6, weight));//right
                    }
                }
            }
            //shoot up
            if (mePos[0] != boardState.height - 1
                && boardState.colors[mePos[0]-1][mePos[1]] == PlayerId)
            {
                //get positions painted below me
                int paintedPosNr = 0;
                bool stop = false;
                Enumerable.Range(mePos[0]+1, boardState.height - mePos[0]).ToList()
                    .ForEach(posY => {
                        if (stop) return;
                        if (boardState.colors[posY][mePos[1]] == PlayerId) { paintedPosNr++; } else stop = true; });

                int weight = 0;
                var lastnotPaintedPos = new List<int>();
                Enumerable.Range(0, mePos[0]).ToList().ForEach(posY =>
                                                        {
                                                            if (IsPosOccupied(boardState, posY, mePos[1]))
                                                            { weight = 0; lastnotPaintedPos = new List<int>(); }
                                                            else
                                                            {
                                                                if (boardState.colors[posY][mePos[1]] != PlayerId)
                                                                { lastnotPaintedPos.Add(posY); weight += boardState.colors[posY][mePos[1]] == null ? 1 : 2; }
                                                            }
                                                        });
                if (paintedPosNr != 0 && lastnotPaintedPos.Any())
                {
                    if (mePos[0] - lastnotPaintedPos.First() <= paintedPosNr)
                    {
                        possiblePlays.Add(CreateWeightActionDirection(3, weight));//up
                    }
                }
            }
            if (mePos[0] > 0
                && boardState.colors[mePos[0] - 1][mePos[1]] == PlayerId)
            {
                //shoot down
                int paintedPosNr = 0;
                bool stop = false;
                //positions above me
                Enumerable.Range(0, mePos[0]).Reverse().ToList()
                    .ForEach(posY => { if (stop) return; if (boardState.colors[posY][mePos[1]] == PlayerId) { paintedPosNr++; } else stop = true; });

                int weight = 0;
                var lastnotPaintedPos = new List<int>();
                Enumerable.Range(mePos[0], boardState.height-mePos[0]).Reverse().ToList()
                                                .ForEach(posY =>
                                                {
                                                    if (IsPosOccupied(boardState, posY, mePos[1]))
                                                    { weight = 0; lastnotPaintedPos = new List<int>(); }
                                                    else
                                                    {
                                                        if (boardState.colors[posY][mePos[1]] != PlayerId)
                                                        { lastnotPaintedPos.Add(posY); weight += boardState.colors[posY][mePos[1]] == null ? 1 : 2; }
                                                    }
                                                });
                if (paintedPosNr != 0 && lastnotPaintedPos.Any())
                {
                    if (lastnotPaintedPos.First() - mePos[0] <= paintedPosNr)
                    {
                        possiblePlays.Add(CreateWeightActionDirection(4, weight));//down
                    }
                }
            }
            return possiblePlays?.OrderByDescending(play => play[1]).FirstOrDefault();
        }

        private List<int> BestWalkOption(Board boardState)
        {
            var mePos = boardState.player_positions[this.PlayerId];//Y,X
            List<List<int>> possiblePlays = new List<List<int>>();//Y,X,weight

            for (int actionOp = 0; actionOp < ActionDirections.Count; actionOp++)
            {
                var possibleAction = ActionDirections[actionOp];
                var nextMoveY = mePos[0] + possibleAction[0];
                int nextMoveX = mePos[1] + possibleAction[1];
                if (nextMoveY >= 0 && nextMoveY < boardState.height
                    && nextMoveX >= 0 && nextMoveX < boardState.width
                    && boardState.colors[nextMoveY][nextMoveX] != PlayerId
                    && !IsPosOccupied(boardState, nextMoveY, nextMoveX))
                {
                    var weight = boardState.colors[nextMoveY][nextMoveX] == null ? 1 : 2;
                    possiblePlays.Add(CreateWeightActionDirection(actionOp, weight));
                }
            }

            return possiblePlays?.OrderByDescending(play => play[1]).FirstOrDefault();
        }

        private List<int> CreateWeightActionDirection(int direction, int weight)
        {
            return new List<int> { direction, weight };
        }

        /// <summary>
        /// Whether there's someone on (x,y)
        /// </summary>
        /// <param name="board"></param>
        /// <param name="posY"></param>
        /// <param name="posX"></param>
        /// <returns></returns>
        private bool IsPosOccupied(Board board, int posY, int posX)
        {
            return board.player_positions.Keys.Where(key => key != PlayerId)
                                            .Any(player => board.player_positions[player][0] == posY
                                                        && board.player_positions[player][1] == posX);
        }
    }
}