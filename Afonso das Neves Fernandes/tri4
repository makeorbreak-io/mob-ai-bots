import random
import json
import sys

import multipaint

global board
global boardp

global type
type = ["walk", "shoot"]

global direction
direction = [[1, 0], [-1, 0], [0, 1], [0, -1],[1,1],[-1,-1],[1,-1],[-1,1]]

global know
know = [[0 for x in range(2)] for y in range(4)]

global mposition
global oposition
mposition = [0 for x in range(2)]
oposition = [0 for x in range(2)]

global height #heigh
global width #with
global idx

global last_play
last_play = set()

global ff
ff=1

class MegaBot4000(object):
    def __init__(self, player_id):
        self.player_id = player_id
        global idx
        idx = player_id

    def next_move(self, state):
        j = state
        global height
        global width
        global boardp
        global mposition
        global oposition
        global last_play
        global ff

        height = j["height"]
        width = j["width"]

        update_board(j["colors"])

        for attribute, value in j["player_positions"].items():
            # print (attribute)
            if attribute == self.player_id:
                mposition[0] = value[0]
                mposition[1] = value[1]
            else:
                #oposition[0]=value[0]
                #oposition[1]=value[1]
                #print(value)
                #a = boardp[value[0]][value[1]]
                boardp[value[0]][value[1]] = 1
        if ff:
            ff = 0
            oposition = mposition
        create_knowledge()

        v = -500
        t = 0
        d = 0
        ik=0
        for tt in type:
            jk=0
            for dd in direction:
                xx = val(ik, jk)
                lk = (tt,dd[0],dd[1])
                if xx > v and not lk in last_play:
                    v = xx
                    t = tt
                    d = dd
                jk+=1
            ik+=1

        lk = (t, d[0],d[1])
        last_play.add(lk)
        if len(last_play) > 8:
            last_play.pop()
            last_play.pop()
            oposition = mposition
        return {
            "type": t ,
            "direction": d ,
        }

def create_knowledge():
    global height
    global width
    global board
    global boardp
    global know
    global mposition


    know = [[0 for x in range(3)] for y in range(8)]
    for ik in range(0,8,2):
        know_aux(ik)

def know_aux(ik):
    global height
    global width
    global board
    global boardp
    global know
    global mposition
    global direction

    xi = mposition[0]
    xj = mposition[1]

    flag = 1
    while 0 <= xj < width and 0 <= xi < height:
        if board[xi][xj] != idx:
            know[ik][2] += 1
            flag = 0
        if flag:
            know[ik][0] += 1
        if boardp[xi][xj] == 1:
            break
        know[ik][1] += 1
        xj += direction[ik][1]
        xi += direction[ik][0]

    xi = mposition[0]
    xj = mposition[1]

    flag = 1
    while 0 <= xj < width and 0 <= xi < height:
        if board[xi][xj] != idx:
            know[ik+1][2] += 1
            flag = 0
        if flag:
            know[ik+1][0] += 1
        if boardp[xi][xj] == 1:
            break
        know[ik+1][1] += 1
        xi -= direction[ik][0]
        xj -= direction[ik][1]

    # know[2][0] += know[3][0]
    # know[3][0] =  know[2][0]
    # know[2][1] += know[3][1]
    # know[3][1] =  know[2][1]

def val(ty, dir):
    global board
    global boardp
    global know
    global mposition
    global oposition

    xi = mposition[0]+direction[dir][0]
    xj = mposition[1] + direction[dir][1]
    v=0
    if 0 <= xi < height and 0 <= xj < width:
        if board[xi][xj] != idx:
            v = 5
        else:
            v = 2
    if ty:
        if not dir % 2 == 0:
            # print(type[ty])
            # print(direction[dir])
            # print(know[dir-1][0])
            return abs(know[dir-1][0]*1.6-know[dir][0])*2 + v + know[dir][1]*0.6+ (abs(mposition[0]-oposition[0]) + abs(mposition[1]-oposition[1]))*1.6
        else:
            # print(type[ty])
            # print(direction[dir])
            # print(know[dir+1][0])
            return abs(know[dir+1][0]*1.6-know[dir][0])*2  + v + know[dir][1]*0.6+ (abs(mposition[0]-oposition[0]) + abs(mposition[1]-oposition[1]))*1.6
    else:
        # print(type[ty])
        # print(direction[dir])
        # print(know[dir][1])
        return know[dir][1]*1.2 + know[dir][2]*1.2 - know[dir][0]*1.3 + v + (abs(mposition[0]-oposition[0]) + abs(mposition[1]-oposition[1]))*3

def update_board(bb):
    global height
    global width

    global board
    global boardp

    board = [[0 for x in range(width)] for y in range(height)]
    boardp = [[0 for x in range(width)] for y in range(height)]

    for i in range(height):
        for j in range(width):
            board[i][j]=bb[i][j]
            boardp[i][j]=0



if __name__ == "__main__":
    multipaint.run(MegaBot4000)
