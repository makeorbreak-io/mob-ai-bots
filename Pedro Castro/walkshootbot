"use strict";

const multipaint = require("multipaint");

const choice = (array) => array[Math.floor(Math.random() * array.length)];

const calculateCellWalkValue = (name, player_id) => {
  let value = 0;
  switch(name){
    case player_id:
      value = 0;
      break;
    case null:
      value = 1;
      break;
    default:
      value=2;
      break;
  }
  return value;
}
const calculateCellShootValue = (row, column, colors, player_id, dir, height, width) => {
  let value = 0;
  let sameColorBehind = 0;
  let inc=0;
  let loop=true;
  while(loop){
    inc++;
    const nextRow = row - 1*dir[0] - inc*dir[0]; 
    const nextCol = column - 1*dir[1] - inc*dir[1]; 
    if(nextRow <0 || nextRow >= width || nextCol < 0 || nextCol >= height){
      loop=false;
    }else {
      if(colors[nextRow][nextCol] == player_id){
        value++;
      }else{
        loop=false;
      }

    }
  }
  inc=-1;
  let sameColorFront= 0;
  loop=true;
  while(loop){
    inc++;
    const nextRow = row + inc*dir[0]; 
    const nextCol = column + inc*dir[1]; 
    if(nextRow <0 || nextRow >= width || nextCol < 0 || nextCol >= height){
      loop=false;
    }else {
      if(colors[nextRow][nextCol] == player_id){
        value--;
      }else{
        loop=false;
      }

    }
  }

  

  return value;
}

const chooseAction = (board, [pcolumn, prow], height, width) => {
  let maxPoints=0;
  let chosenDirection=[0,0];
  let chosenAction='walk';

  const arrayDirections = [[-1,-1],[-1,0],[-1,1],[0,-1],[0,1],[1,-1],[1,0],[1,1]];
  arrayDirections.forEach( dir => {
    const column =  pcolumn + dir[0];
    const row =  prow + dir[1];
    if(column >= 0 && column < height && row >= 0 && row < width){
    
      const walkPoints = board[column][row].walk;
      if(walkPoints > maxPoints) {
        maxPoints = walkPoints;
        chosenDirection = dir;
        chosenAction = 'walk';
      }
      const shootPoints = board[column][row].shoot;
      if(shootPoints > maxPoints) {
        maxPoints = shootPoints;
        chosenDirection = dir;
        chosenAction = 'shoot';
      }

    }
  });
 return [chosenAction, chosenDirection]; 
}

class Megabot2000 {
  constructor(player_id) {
    this.player_id = player_id;
  }

  next_move(state) {
    let board = state.colors.map((line,row) => line.map( (cell, column) => ({walk: calculateCellWalkValue(cell, this.player_id), shoot: calculateCellShootValue(row, column, state.colors, this.player_id, [-1,-1], state.height,state.width) })));
    const otherPlayers = Object.keys(state.player_positions).map( key => key != this.player_id ? state.player_positions[key] : null).filter( o=> o );
    otherPlayers.forEach(o => board[o[0]][o[1]] = -1);
    console.error("other_players",otherPlayers);
    console.error("board",board);
    const [type, direction] = chooseAction(board, state.player_positions[this.player_id],state.height,state.width);
    return {
      type,
      direction,
    };
  }
}

multipaint.run(Megabot2000);