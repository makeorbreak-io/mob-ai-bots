using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization.Formatters.Binary;
using mob_ai_csharp.multipaint;
using Newtonsoft.Json;

namespace mob_ai_csharp
{
    public class Bot : IBot
    {
        public List<string> ActionTypes = new List<string>() { "shoot", "walk" };

        public List<List<int>> ActionDirections = new List<List<int>>()
        {
            new List<int> {-1, -1}, //UPLEFT
            new List<int> {0, -1},  //LEFT
            new List<int> {1, -1},  //DOWNLEFT
            new List<int> {-1, 0},  //UP
            new List<int> {1, 0},   //DOWN
            new List<int> {-1, 1},  //UPRIGHT
            new List<int> {0, 1},   //RIGHT
            new List<int> {1, 1},   //DOWNRIGHT
        };

        private string PlayerId;

        private string OponentID;

        private List<int> OponentPos;

        public Random R;

        private Point myCurrentPos;

        private List<Move> myLastMoves = new List<Move>();

        private static void Main(string[] args)
        {
            Runner.Run(new Bot());
        }

        public void SetPlayerId(string playerId)
        {
            this.PlayerId = playerId;
            this.R = new Random();
        }

        public Move NextMove(Board boardState)
        {
            myCurrentPos = new Point(boardState.player_positions[this.PlayerId][1],
                boardState.player_positions[this.PlayerId][0]);

            this.OponentID = boardState.player_positions.FirstOrDefault(x => x.Key != PlayerId).Key;

            this.OponentPos = boardState.player_positions.FirstOrDefault(x => x.Key != PlayerId).Value;

            //Depth stuff
            //Get a Move
            var move = new Move();

            move = GetNewMove(boardState, myCurrentPos, 2);

            if (move == null)
            {
                move = BackUpMove(myCurrentPos, boardState);
            }

            MapList2Move(move.Direction);
            myLastMoves.Add(move);

            if (myLastMoves.Count > 5)
            {
                var mlm = myLastMoves;

                var condition = AreLast3MovesTheSame(myLastMoves);

                // Remove Randomness
                if (condition)
                {
                    return BestAttack(boardState, myCurrentPos);
                }
            }

            return move;
        }

        private Move BestAttack(Board board, Point currentPosition)
        {
            var counterMove = new List<MoveCount>();

            for (int i = 0; i < ActionDirections.Count; i++)
            {
                var move = ActionDirections[i];

                var reverseAttackDirection = new List<int> { -move[0], -move[1] };

                var atackSquare = ExecuteWalkMove(move, currentPosition);
                var behindSquare = ExecuteWalkMove(reverseAttackDirection, currentPosition);
                var cellCount = 0;

                while (!OutOfBounds(behindSquare, board) && !OutOfBounds(atackSquare, board) && board.colors[behindSquare.Y][behindSquare.X] == PlayerId)
                {
                    if (atackSquare.X == OponentPos[1] && atackSquare.Y == OponentPos[0])
                        break;

                    if (board.colors[atackSquare.Y][atackSquare.X] != PlayerId)
                    {
                        cellCount++;
                    }

                    if (board.colors[atackSquare.Y][atackSquare.X] == OponentID)
                    {
                        cellCount++;
                    }

                    atackSquare = ExecuteWalkMove(move, atackSquare);
                    behindSquare = ExecuteWalkMove(reverseAttackDirection, behindSquare);
                }

                counterMove.Add(new MoveCount(new List<Move> { new Move() { Direction = move, Type = ActionTypes[0] } }, cellCount));
            }

            return counterMove.OrderByDescending(x => x.Count).FirstOrDefault().Move.FirstOrDefault();
        }

        private bool AreLast3MovesTheSame(List<Move> myLastMoves)
        {
            var last3 = myLastMoves.Skip(myLastMoves.Count - 3).Take(3).ToList();

            return last3[0].Type == last3[1].Type && last3[0].Type == last3[2].Type && last3[1].Type == last3[2].Type && last3[0].Type == ActionTypes[0]
                && AreDirectionEqual(last3[0], last3[1]) && AreDirectionEqual(last3[0], last3[2]) && AreDirectionEqual(last3[1], last3[1]);
        }

        public bool AreDirectionEqual(Move move1, Move move2)
        {
            return move1.Direction[0] == move2.Direction[0] && move1.Direction[1] == move2.Direction[1];
        }

        private Move GetNewMove(Board boardState, Point myCurrentPosition, int v)
        {
            var permutations = GetPermutations(v);

            var theChosenOne = EvaluatePermutations(permutations, boardState, myCurrentPosition);

            return theChosenOne;
        }

        private Move EvaluatePermutations(List<List<Move>> permutations, Board board, Point myCurrentPosition)
        {
            var hg = 0.0;
            var selectedMove = new Move() { Direction = ActionDirections[0], Type = ActionTypes[0] };

            var a = permutations.Where(x => x[0].Type == ActionTypes[0]);

            foreach (var moves in permutations)
            {
                var modifiablePosition = new Point(myCurrentPosition.X, myCurrentPosition.Y);
                var cellCount = 0.0;
                var board2 = CreateNewBoard(board);

                foreach (var move in moves)
                {
                    var partialCount = 0.0;
                    (board2, modifiablePosition, partialCount) = ExcuteMove(board2, move, modifiablePosition);

                    cellCount += partialCount;
                }

                if (cellCount > hg)
                {
                    hg = cellCount;
                    selectedMove = moves[0];
                }
            }

            return selectedMove;
        }

        public Board CreateNewBoard(Board board)
        {
            var colors = new List<List<string>>();

            for (int i = 0; i < board.colors.Count; i++)
            {
                colors.Add(board.colors[i].ToList());
            }

            return new Board
            {
                colors = colors,
                height = board.height,
                width = board.width,
                turns_left = board.turns_left,
                player_positions = board.player_positions,
            };
        }

        private (Board, Point, double) ExcuteMove(Board board, Move move, Point modifiablePosition)
        {
            var guysPos = board.player_positions.FirstOrDefault(x => x.Key != PlayerId);
            var guysPoint = new Point(guysPos.Value[0], guysPos.Value[1]);

            var cellCount = 0.0;
            if (move.Type == ActionTypes[1])
            {
                var possibleMovePoint = ExecuteWalkMove(move.Direction, modifiablePosition);

                if (!OutOfBounds(possibleMovePoint, board))
                {
                    if (possibleMovePoint == guysPoint)
                    {
                        cellCount -= 1;
                    }

                    if (board.colors[possibleMovePoint.Y][possibleMovePoint.X] != PlayerId)
                    {
                        cellCount++;
                    }

                    if (board.colors[possibleMovePoint.Y][possibleMovePoint.X] == OponentID)
                    {
                        cellCount += 1;
                    }

                    board.colors[possibleMovePoint.Y][possibleMovePoint.X] = PlayerId;
                    modifiablePosition = possibleMovePoint;
                }
            }
            else
            {
                var reverseAttackDirection = new List<int> { -move.Direction[0], -move.Direction[1] };

                var atackSquare = ExecuteWalkMove(move.Direction, modifiablePosition);
                var behindSquare = ExecuteWalkMove(reverseAttackDirection, modifiablePosition);

                while (!OutOfBounds(behindSquare, board) && !OutOfBounds(atackSquare, board) && board.colors[behindSquare.Y][behindSquare.X] == PlayerId)
                {
                    if (atackSquare.X == OponentPos[1] && atackSquare.Y == OponentPos[0])
                        break;

                    if (board.colors[atackSquare.Y][atackSquare.X] != PlayerId)
                    {
                        cellCount++;
                    }

                    if (board.colors[atackSquare.Y][atackSquare.X] == OponentID)
                    {
                        cellCount++;
                    }

                    board.colors[atackSquare.Y][atackSquare.X] = PlayerId;

                    atackSquare = ExecuteWalkMove(move.Direction, atackSquare);
                    behindSquare = ExecuteWalkMove(reverseAttackDirection, behindSquare);
                }
            }

            return (board, modifiablePosition, cellCount);
        }

        private List<List<Move>> GetPermutations(int depth)
        {
            //TODO: plz do a recursion in this part... or kill yourself before someone sees this code kthxbye;
            // I srsly Hope no one sees this before I change this...
            // <insert here god why meme>
            var fullPermList = new List<List<Move>>();
            foreach (var dir1 in ActionDirections)
            {
                foreach (var act1 in ActionTypes)
                {
                    foreach (var dir2 in ActionDirections)
                    {
                        foreach (var act2 in ActionTypes)
                        {
                            foreach (var dir3 in ActionDirections)
                            {
                                foreach (var act3 in ActionTypes)
                                {
                                    var perm = new List<Move>();
                                    perm.Add(new Move { Direction = dir1, Type = act1 });
                                    perm.Add(new Move { Direction = dir2, Type = act2 });
                                    perm.Add(new Move { Direction = dir2, Type = act2 });

                                    fullPermList.Add(perm);
                                }
                            }
                        }
                    }
                }
            }

            return fullPermList;
        }

        public IEnumerator<Move> GetActions()
        {
            for (int i = 0; i < ActionDirections.Count; i++)
            {
                for (int j = 0; j < ActionTypes.Count; j++)
                {
                    yield return new Move { Direction = ActionDirections[i], Type = ActionTypes[j] };
                }
            }
        }

        //G stands for G
        public List<Move> G(string type) => Enumerable.Range(0, ActionDirections.Count)
            .Select(x => new Move { Direction = ActionDirections[x], Type = type }).ToList();

        // Always have a BackUp Plan just in case
        private Move BackUpMove(Point myCurrentPos, Board boardState)
        {
            var dic = new Dictionary<List<int>, double>();

            var opponentID = boardState.player_positions.FirstOrDefault(x => x.Key != PlayerId).Key;

            var opponentPos = boardState.player_positions[opponentID];

            for (int i = 0; i < ActionDirections.Count; i++)
            {
                var newPoint = ExecuteWalkMove(ActionDirections[i], myCurrentPos);

                var distance = Math.Sqrt(Math.Pow(newPoint.X - opponentPos[1], 2) +
                                         Math.Pow(newPoint.Y - opponentPos[0], 2));

                dic.Add(ActionDirections[i], distance);
            }

            var move = new Move();
            move.Type = ActionTypes[1];
            move.Direction = dic.OrderBy(x => x.Value).FirstOrDefault().Key;

            return move;
        }

        public bool IsMySquare(Board boardState, Point myCurrentPosition) =>
            boardState.colors[myCurrentPosition.Y][myCurrentPosition.X] == PlayerId;

        public bool IsEnemySquare(Board boardState, Point point) =>
            boardState.colors[point.Y][point.X] == boardState.player_positions.FirstOrDefault(x => x.Key != PlayerId).Key;

        private bool OutOfBounds(Point point, Board boardState)
        {
            return point.X < 0 || point.X >= boardState.width || point.Y < 0 || point.Y >= boardState.height;
        }

        public Point ExecuteWalkMove(List<int> move, Point cP) => new Point(cP.X + move[1], cP.Y + move[0]);

        public void MapList2Move(List<int> move)
        {
            if (move[0] == 1)
            {
                if (move[1] == 1)
                {
                    Console.Error.WriteLine("DOWN RIGHT");
                }
                else if (move[1] == 0)
                {
                    Console.Error.WriteLine("DOWN");
                }
                else
                {
                    Console.Error.WriteLine("DOWN LEFT");
                }
            }
            else if (move[0] == 0)
            {
                if (move[1] == 1)
                {
                    Console.Error.WriteLine("RIGHT");
                }
                else if (move[1] == 0)
                {
                    Console.Error.WriteLine("NO ACTION");
                }
                else
                {
                    Console.Error.WriteLine("LEFT");
                }
            }
            else if (move[0] == -1)
            {
                if (move[1] == 1)
                {
                    Console.Error.WriteLine("UP RIGHT");
                }
                else if (move[1] == 0)
                {
                    Console.Error.WriteLine("UP");
                }
                else
                {
                    Console.Error.WriteLine("UP LEFT");
                }
            }
        }
    }

    public class MoveCount
    {
        public MoveCount()
        {
        }

        public MoveCount(List<Move> move, double count)
        {
            this.Move = move;
            this.Count = count;
        }

        public List<Move> Move { get; set; }

        public double Count { get; set; }
    }

    public class Point
    {
        public int X { get; set; }
        public int Y { get; set; }

        public Point()
        {
        }

        public Point(int x, int y)
        {
            this.X = x;
            this.Y = y;
        }
    }
}
