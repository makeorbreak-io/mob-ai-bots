 using System;
using System.Collections.Generic;
using System.Linq;
using mob_ai_csharp.multipaint;

namespace mob_ai_csharp
{
    public class Bot : IBot
    {
        public List<string> ActionTypes = new List<string>() { "shoot", "walk" };

        public List<List<int>> ActionDirections = new List<List<int>>()
        {
            new List<int>{-1, -1},   //UPLEFT       //UPLEFT
            new List<int>{ 0, -1},   //UP           //LEFT
            new List<int>{ 1, -1},   //UPRIGHT      //DOWNLEFT
            new List<int>{-1,  0},   //LEFT         //UP
            new List<int>{ 1,  0},   //RIGHT        //DOWN
            new List<int>{-1,  1},   //DOWNLEFT     //UPRIGHT
            new List<int>{ 0,  1},   //DOWN         //RIGHT
            new List<int>{ 1,  1},   //DOWNRIGHT    //DOWNRIGHT
        };

        private string PlayerId;
        public Random R;

        private Board previousBoard;

        private static void Main(string[] args)
        {
            Runner.Run(new Bot());
        }

        public void SetPlayerId(string playerId)
        {
            this.PlayerId = playerId;
            this.R = new Random();
        }

        public Move NextMove(Board boardState)
        {
            //Move move = new Move();

            //move.Type = this.ActionTypes[R.Next(2)];
            //move.Direction = this.ActionDirections[this.R.Next(8)];

            // k

            var isStuck = CheckIfBoardIsEqual(boardState, this.previousBoard);

            previousBoard = boardState;

            var actionTypes = new List<string>(ActionTypes);

            if (isStuck)
            {
                var lastMove = boardState.previous_actions.Last()[this.PlayerId];
                if (lastMove.Type == ActionTypes[0])
                {
                    return new Move
                    {
                        Type = ActionTypes[1],
                        Direction = lastMove.Direction
                    };
                }
                actionTypes.Remove(ActionTypes[1]);
            }



            Move move;
            var scores = new List<int>();
            (move, scores) = GetBestMove(boardState, Math.Min(boardState.turns_left, 3), scores, actionTypes);

            if (scores.Last() == GetScoreDifference(boardState))
            {
                return GetMoveDirection(boardState);
            }

            return move;
        }

        private bool CheckIfBoardIsEqual(Board boardState, Board previousBoard)
        {
            if(previousBoard == null)
            {
                return false;
            }

            if (!boardState.player_positions.All(x => IsSamePosition(previousBoard.player_positions[x.Key], x.Value)))
            {
                return false;
            }

            for (int i = 0; i < boardState.height; i++)
            {
                for (int j = 0; j < boardState.width; j++)
                {
                    if(boardState.colors[i][j] != previousBoard.colors[i][j])
                    {
                        return false;
                    }
                }
            }

            return true;
        }

        private bool IsSamePosition(List<int> p1, List<int> p2) => p1[0] == p2[0] && p1[1] == p2[1];

        private (Move, int) GetMoveTowards(Board board, int targetY, int targetX)
        {
            var distanceY = targetY - board.player_positions[this.PlayerId][0];
            var distanceX = targetX - board.player_positions[this.PlayerId][1];
            var nMoves = Math.Max(Math.Abs(distanceY), Math.Abs(distanceX));

            return (
                            new Move
                            {
                                Direction = new List<int> { Normalize(distanceY), Normalize(distanceX) },
                                Type = ActionTypes[1],
                            }
            , nMoves);
        }

        private Move GetMoveDirection(Board board)
        {
            Move bestMove = null;
            int? distance = null;
            for (int i = 0; i < board.height; i++)
            {
                for (int j = 0; j < board.width; j++)
                {
                    if (board.colors[i][j] != this.PlayerId && !board.player_positions.Any(x => x.Value[0] == i && x.Value[1] == j))
                    {
                        Move nMove;
                        int nDistance;
                        (nMove, nDistance) = GetMoveTowards(board, i, j);
                        if (distance == null || distance > nDistance)
                        {
                            distance = nDistance;
                            bestMove = nMove;
                        }
                    }
                }
            }

            if (bestMove == null)
            {
                var opponentPosition = board.player_positions.First(x => x.Key != this.PlayerId).Value;
                (bestMove, distance) = GetMoveTowards(board, opponentPosition[0], opponentPosition[1]);
            }

            return bestMove;
        }

        public (Move, List<int>) GetBestMove(Board board, int plays, List<int> currentScores, List<string> actionTypes)
        {
            List<int> bestScore = null;
            Move bestMove = null;
            foreach (var action in actionTypes)
            {
                foreach (var direction in ActionDirections)
                {
                    var newBoard = GetNewBoard(board, action, direction);
                    var hipoScores = new List<int>(currentScores);
                    hipoScores.Add(GetScoreDifference(newBoard));
                    if (plays > 1)
                    {
                        Move move;
                        (move, hipoScores) = GetBestMove(newBoard, plays - 1, hipoScores, actionTypes);
                    }

                    //if (bestMove == null || Enumerable.Range(0, bestScore.Count).Select(x => bestScore.Count - x - 1).Select(x => bestScore[x] - hipoScores[x]).FirstOrDefault(x => x != 0) < 0)
                    //{
                    //    bestScore = hipoScores;
                    //    bestMove = new Move { Direction = direction, Type = action };
                    //}

                    if (bestMove == null || bestScore.Last() < hipoScores.Last() || (bestScore.Last() == hipoScores.Last() && bestScore.Zip(hipoScores, (b, h) => b < h ? -1 : b == h ? 0 : 1).FirstOrDefault(x => x != 0) == -1))
                    {
                        bestScore = hipoScores;
                        bestMove = new Move { Direction = direction, Type = action };
                    }
                }
            }

            return (bestMove, bestScore);
        }

        private Board GetNewBoard(Board initialBoard, string action, List<int> direction)
        {
            var myPosition = initialBoard.player_positions[this.PlayerId];
            var board = CloneBoard(initialBoard);

            var positionToConquer = new List<int> { myPosition[0] + direction[0], myPosition[1] + direction[1] };

            if (IsValidPosition(positionToConquer, board) && IsFreePosition(positionToConquer, board))
            {
                board.colors[positionToConquer[0]][positionToConquer[1]] = this.PlayerId;

                if (action == "shoot")
                {
                    var backPosition = new List<int> { myPosition[0] - direction[0], myPosition[1] - direction[1] };

                    if (IsValidPosition(backPosition, board) && board.colors[backPosition[0]][backPosition[1]] == this.PlayerId)
                    {
                        backPosition = new List<int> { backPosition[0] - direction[0], backPosition[1] - direction[1] };
                        while (IsValidPosition(backPosition, board) && board.colors[backPosition[0]][backPosition[1]] == this.PlayerId)
                        {
                            positionToConquer = new List<int> { positionToConquer[0] + direction[0], positionToConquer[1] + direction[1] };

                            if (IsValidPosition(positionToConquer, board) && IsFreePosition(positionToConquer, board))
                            {
                                board.colors[positionToConquer[0]][positionToConquer[1]] = this.PlayerId;
                            }
                            else
                            {
                                break;
                            }

                            backPosition = new List<int> { backPosition[0] - direction[0], backPosition[1] - direction[1] };
                        }
                    }
                }
                else
                {
                    board.player_positions[this.PlayerId] = positionToConquer;
                }
            }

            return board;
        }

        private Board CloneBoard(Board initialBoard)
        {
            var colorsClone = new List<List<string>>();
            foreach (var line in initialBoard.colors)
            {
                colorsClone.Add(new List<string>(line));
            }

            return new Board
            {
                height = initialBoard.height,
                width = initialBoard.width,
                player_positions = new Dictionary<string, List<int>>(initialBoard.player_positions),
                colors = colorsClone
            };
        }

        private int Normalize(int v) => v == 0 ? 0 : (v / Math.Abs(v));

        private bool IsFreePosition(int x, int y, Board board) => !board.player_positions.Any(p => p.Value.Last() == x && p.Value.First() == y);

        private bool IsFreePosition(List<int> position, Board board) => IsFreePosition(position[1], position[0], board);

        private bool IsValidPosition(List<int> position, Board board) => IsValidPosition(position[1], position[0], board);

        private bool IsValidPosition(int x, int y, Board board) => x >= 0 && x < board.width && y >= 0 && y < board.height;

        public int GetScoreDifference(Board board)
        {
            var boardScores = GetScores(board).OrderBy(x => x.Key == this.PlayerId);
            return boardScores.Last().Value - boardScores.First().Value;
        }

        public Dictionary<string, int> GetScores(Board board) => board.colors.SelectMany(x => x).Where(x => x != null).GroupBy(x => x).ToDictionary(x => x.Key, x => x.Count());
    }
}